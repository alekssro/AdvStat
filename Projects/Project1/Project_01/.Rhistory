## Number of iterations
nIter <- 20
for (iter in 1:nIter){
cat("--------------------------------------","\n")
HMMexpct <- HMMexpectationsFct(IntPrb,TrnsPrb,EmsPrb,obs.seq)
cat("\n")
cat("Iteration:",iter,"log-likelihood:",log(HMMexpct$Lk),"\n")
TrnsPrb <- HMMexpct$TransCnt/rowSums(HMMexpct$TransCnt)
cat("Updated transition probability matrix:","\n")
print(TrnsPrb)
N.di.1 <- sum(HMMexpct$PostProb[,1]*diff.seq)
N.sa.1 <- sum(HMMexpct$PostProb[,1]*(1-diff.seq))
N.di.2 <- sum(HMMexpct$PostProb[,2]*diff.seq)
N.sa.2 <- sum(HMMexpct$PostProb[,2]*(1-diff.seq))
cat("Updated emission probabilities:","\n")
cat(prb.di.1,prb.di.2,"\n")
prb.di.1 <- N.di.1/(N.di.1+N.sa.1)
prb.di.2 <- N.di.2/(N.di.2+N.sa.2)
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
}
n_subs <- (HMMexpct$TransCnt[1,1] * prb.di.1) + (HMMexpct$TransCnt[1,2] * prb.di.2)
+ (HMMexpct$TransCnt[2,1] * prb.di.1) + (HMMexpct$TransCnt[2,2] * prb.di.2)
cat("Number of expected substitutions:", n_subs)
source("MyLibrary.R")
knitr::opts_chunk$set(echo = TRUE, comment = NA, highlight = F)
source("ASLMiB_Library.R")
viterbi <- calcViterbi(initProb = c(stationary[1,1], stationary[1,2]),
transProb = result$transProb,
emissionProb = result$emissProb,
obsSeq = obs.seq,
DEBUG = F)
viterbi <- calcViterbi(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq,
DEBUG = F)
viterbi
# TransProb: Transition probabilities;
#            Probabilities between hidden states
#            nHS times nHS matrix
# EmisProb: Emission probabilities
# Len: Length of hidden and emitted sequences
#
# Output:
# Sim: List of hidden and emitted sequence
# $HidSeq and $ObsSeq
#---------------------------------------------------------
HMMsimFct <- function(InitProb,TransProb,EmisProb,len){
HidSeq <- rep(0,len)
ObsSeq <- rep(0,len)
nHS <- nrow(TransProb)
nE <- ncol(EmisProb)
HidSeq[1] <- sample(1:nHS,size=1,replace=TRUE,InitProb)
ObsSeq[1] <- sample(1:nE,size=1,replace=TRUE,EmisProb[HidSeq[1],])
for (i in 2:len){
HidSeq[i] <- sample(1:nHS,size=1,replace=TRUE,TransProb[HidSeq[i-1],])
ObsSeq[i] <- sample(1:nE,size=1,replace=TRUE,EmisProb[HidSeq[i],])
}
Sim <- list()
Sim$HidSeq <- HidSeq
Sim$ObsSeq <- ObsSeq
return(Sim)
}
source('/mnt/WindowsSSD/Users/aleks/Nextcloud/Universidad/Bioinformatics/3rdSemester/AStatLiB/Week04/HMMsim.R')
posterior <- forwardBackward(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq)
knitr::opts_chunk$set(echo = TRUE, comment = NA, highlight = F)
source("ASLMiB_Library.R")
calcAvgT <- function(p, s){
t <- (-3/4)*log(1-((4/3)*p))
return(t/s/2)
}
s <- 0.5*10^-9
cat("Estimated divergence (human-chimpanzee):", calcAvgT(0.0137, s)/10^6, "million years")
cat("Estimated divergence (human-gorilla):", calcAvgT(0.0175, s)/10^6, "million years")
cat("Estimated divergence (human-orangutan):", calcAvgT(0.0340, s)/10^6, "million years")
dat <- dget("PhyloFoot.dat")
S1 <- dat$S1
S2 <- dat$S2
cat("S1:", substring(S1, 0, 10), "...", substring(S1, nchar(S1)-10), "\n\n")
cat("S2:", substring(S2, 0, 10), "...", substring(S2, nchar(S2)-10))
S1.num <- as.numeric(strsplit(chartr("AGCT","1234",S1),"")[[1]])
S2.num <- as.numeric(strsplit(chartr("AGCT","1234",S2),"")[[1]])
cat("S1.num:", head(S1.num), "...", tail(S1.num), "\n\n")
cat("S2.num:", head(S2.num), "...", tail(S2.num))
obs.seq <- 4*(S1.num-1)+S2.num
cat("obs.seq:", head(obs.seq), "...", tail(obs.seq), "\n")
4*(1-1)+1 # A correspond to state 1
4*(2-1)+3 # G corresponds to state 2, C correspond to state 3
diff.indx <- c(0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0)
diff.seq <- diff.indx[obs.seq]
sum(diff.seq)
p = 69/293
t <- (-3/4)*log(1-((4/3)*p))
expected_nsubs <- t * 293
cat("Expected nº of substitutions:", expected_nsubs, "*")
## Emission probability function
prb.di.1 <- 0.1 ## Functionally important
prb.di.2 <- 0.3 ## Neutrally evolving
EmsPrbFct <- function(prb.di.1, prb.di.2){
EmsPrb <- matrix(0,nrow=2,ncol=16)
for (i in 1:4){ ## (A,G,C,T)
for (j in 1:4){ ## (A,G,C,T)
if (i!=j) EmsPrb[1,4*(i-1)+j] <- prb.di.1/12  # 12 possiblities if nucleotides are not the same
if (i!=j) EmsPrb[2,4*(i-1)+j] <- prb.di.2/12
if (i==j) EmsPrb[1,4*(i-1)+j] <- (1-prb.di.1)/4 # 4 possiblities if nucleotides are the same
if (i==j) EmsPrb[2,4*(i-1)+j] <- (1-prb.di.2)/4
}
}
return(EmsPrb)
}
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
HMMexpectationsFct <- function(InitProb,TransProb,EmisProb,ObsSeq){
len <- length(ObsSeq)
nHS <- nrow(TransProb)
# Forward algorithm
## Define ForwardLik matrix
ForwardLik <- matrix(0,nrow=len,ncol=nHS)
## Start condition
ForwardLik[1,] <- InitProb*EmisProb[,ObsSeq[1]]
## Determine ForwardLik by recursion
for (k in 2:len){
for (j in 1:nHS){
ForwardLik[k,j] <- sum(TransProb[,j]*
rep(EmisProb[j,ObsSeq[k]],nHS)*
ForwardLik[k-1,])
}
}
ForwardLikVal <- sum(ForwardLik[len,])
cat("Likelihood from Forward algorithm:",ForwardLikVal,"\n")
# Backward algorithm
## Define BackwardLik
BackwardLik <- matrix(0,nrow=len,ncol=nHS)
## Start condition
BackwardLik[len,] <- rep(1,nHS)
## Determine logBackwardLik by recursion
for (k in (len-1):1){
for (j in 1:nHS){
BackwardLik[k,j] <- sum(TransProb[j,1:nHS]*
EmisProb[,ObsSeq[k+1]]*
BackwardLik[k+1,])
}
}
BackwardLikVal <- sum(InitProb*
EmisProb[,ObsSeq[k]]*
BackwardLik[1,])
cat("Likelihood from Backward algorithm:",BackwardLikVal,"\n")
## Posterior probability
PostProb <- exp(log(BackwardLik)+log(ForwardLik)-log(BackwardLikVal))
## Expected transition counts
TransCnt <- matrix(0,nrow=nHS,ncol=nHS)
for (k in 1:nHS){
for (l in 1:nHS){
Probkl <- ForwardLik[1:(len-1),k]*BackwardLik[2:len,l]/
BackwardLikVal*TransProb[k,l]*EmisProb[l,ObsSeq[2:len]]
TransCnt[k,l] <- sum(Probkl)
}
}
output <- list()
output$TransCnt <- TransCnt
output$PostProb <- PostProb
output$Lk <- BackwardLikVal
return(output)
}
## EM algorithm -------------------------------------------------------
## Specify initial parameter values
IntPrb <- c(1/2,1/2)
TrnsPrb <- matrix(c(0.8,0.2,
0.1,0.9),byrow=TRUE,nrow=2,ncol=2)
prb.di.1 <- 0.2
prb.di.2 <- 0.4
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
## Number of iterations
nIter <- 20
for (iter in 1:nIter){
cat("--------------------------------------","\n")
HMMexpct <- HMMexpectationsFct(IntPrb,TrnsPrb,EmsPrb,obs.seq)
cat("\n")
cat("Iteration:",iter,"log-likelihood:",log(HMMexpct$Lk),"\n")
TrnsPrb <- HMMexpct$TransCnt/rowSums(HMMexpct$TransCnt)
cat("Updated transition probability matrix:","\n")
print(TrnsPrb)
N.di.1 <- sum(HMMexpct$PostProb[,1]*diff.seq)
N.sa.1 <- sum(HMMexpct$PostProb[,1]*(1-diff.seq))
N.di.2 <- sum(HMMexpct$PostProb[,2]*diff.seq)
N.sa.2 <- sum(HMMexpct$PostProb[,2]*(1-diff.seq))
cat("Updated emission probabilities:","\n")
cat(prb.di.1,prb.di.2,"\n")
prb.di.1 <- N.di.1/(N.di.1+N.sa.1)
prb.di.2 <- N.di.2/(N.di.2+N.sa.2)
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
}
n_subs <- (HMMexpct$TransCnt[1,1] * prb.di.1) + (HMMexpct$TransCnt[1,2] * prb.di.2) +
(HMMexpct$TransCnt[2,1] * prb.di.1) + (HMMexpct$TransCnt[2,2] * prb.di.2)
cat("Number of expected substitutions:", n_subs)
viterbi <- calcViterbi(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq,
DEBUG = F)
decoded_viterbi <- viterbi$backtrack
posterior <- forwardBackward(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq)
knitr::opts_chunk$set(echo = TRUE, comment = NA, highlight = F)
source("ASLMiB_Library.R")
calcAvgT <- function(p, s){
t <- (-3/4)*log(1-((4/3)*p))
return(t/s/2)
}
s <- 0.5*10^-9
cat("Estimated divergence (human-chimpanzee):", calcAvgT(0.0137, s)/10^6, "million years")
cat("Estimated divergence (human-gorilla):", calcAvgT(0.0175, s)/10^6, "million years")
cat("Estimated divergence (human-orangutan):", calcAvgT(0.0340, s)/10^6, "million years")
dat <- dget("PhyloFoot.dat")
S1 <- dat$S1
S2 <- dat$S2
cat("S1:", substring(S1, 0, 10), "...", substring(S1, nchar(S1)-10), "\n\n")
cat("S2:", substring(S2, 0, 10), "...", substring(S2, nchar(S2)-10))
S1.num <- as.numeric(strsplit(chartr("AGCT","1234",S1),"")[[1]])
S2.num <- as.numeric(strsplit(chartr("AGCT","1234",S2),"")[[1]])
cat("S1.num:", head(S1.num), "...", tail(S1.num), "\n\n")
cat("S2.num:", head(S2.num), "...", tail(S2.num))
obs.seq <- 4*(S1.num-1)+S2.num
cat("obs.seq:", head(obs.seq), "...", tail(obs.seq), "\n")
4*(1-1)+1 # A correspond to state 1
4*(2-1)+3 # G corresponds to state 2, C correspond to state 3
diff.indx <- c(0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0)
diff.seq <- diff.indx[obs.seq]
sum(diff.seq)
p = 69/293
t <- (-3/4)*log(1-((4/3)*p))
expected_nsubs <- t * 293
cat("Expected nº of substitutions:", expected_nsubs, "*")
## Emission probability function
prb.di.1 <- 0.1 ## Functionally important
prb.di.2 <- 0.3 ## Neutrally evolving
EmsPrbFct <- function(prb.di.1, prb.di.2){
EmsPrb <- matrix(0,nrow=2,ncol=16)
for (i in 1:4){ ## (A,G,C,T)
for (j in 1:4){ ## (A,G,C,T)
if (i!=j) EmsPrb[1,4*(i-1)+j] <- prb.di.1/12  # 12 possiblities if nucleotides are not the same
if (i!=j) EmsPrb[2,4*(i-1)+j] <- prb.di.2/12
if (i==j) EmsPrb[1,4*(i-1)+j] <- (1-prb.di.1)/4 # 4 possiblities if nucleotides are the same
if (i==j) EmsPrb[2,4*(i-1)+j] <- (1-prb.di.2)/4
}
}
return(EmsPrb)
}
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
HMMexpectationsFct <- function(InitProb,TransProb,EmisProb,ObsSeq){
len <- length(ObsSeq)
nHS <- nrow(TransProb)
# Forward algorithm
## Define ForwardLik matrix
ForwardLik <- matrix(0,nrow=len,ncol=nHS)
## Start condition
ForwardLik[1,] <- InitProb*EmisProb[,ObsSeq[1]]
## Determine ForwardLik by recursion
for (k in 2:len){
for (j in 1:nHS){
ForwardLik[k,j] <- sum(TransProb[,j]*
rep(EmisProb[j,ObsSeq[k]],nHS)*
ForwardLik[k-1,])
}
}
ForwardLikVal <- sum(ForwardLik[len,])
cat("Likelihood from Forward algorithm:",ForwardLikVal,"\n")
# Backward algorithm
## Define BackwardLik
BackwardLik <- matrix(0,nrow=len,ncol=nHS)
## Start condition
BackwardLik[len,] <- rep(1,nHS)
## Determine logBackwardLik by recursion
for (k in (len-1):1){
for (j in 1:nHS){
BackwardLik[k,j] <- sum(TransProb[j,1:nHS]*
EmisProb[,ObsSeq[k+1]]*
BackwardLik[k+1,])
}
}
BackwardLikVal <- sum(InitProb*
EmisProb[,ObsSeq[k]]*
BackwardLik[1,])
cat("Likelihood from Backward algorithm:",BackwardLikVal,"\n")
## Posterior probability
PostProb <- exp(log(BackwardLik)+log(ForwardLik)-log(BackwardLikVal))
## Expected transition counts
TransCnt <- matrix(0,nrow=nHS,ncol=nHS)
for (k in 1:nHS){
for (l in 1:nHS){
Probkl <- ForwardLik[1:(len-1),k]*BackwardLik[2:len,l]/
BackwardLikVal*TransProb[k,l]*EmisProb[l,ObsSeq[2:len]]
TransCnt[k,l] <- sum(Probkl)
}
}
output <- list()
output$TransCnt <- TransCnt
output$PostProb <- PostProb
output$Lk <- BackwardLikVal
return(output)
}
## EM algorithm -------------------------------------------------------
## Specify initial parameter values
IntPrb <- c(1/2,1/2)
TrnsPrb <- matrix(c(0.8,0.2,
0.1,0.9),byrow=TRUE,nrow=2,ncol=2)
prb.di.1 <- 0.2
prb.di.2 <- 0.4
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
## Number of iterations
nIter <- 20
for (iter in 1:nIter){
cat("--------------------------------------","\n")
HMMexpct <- HMMexpectationsFct(IntPrb,TrnsPrb,EmsPrb,obs.seq)
cat("\n")
cat("Iteration:",iter,"log-likelihood:",log(HMMexpct$Lk),"\n")
TrnsPrb <- HMMexpct$TransCnt/rowSums(HMMexpct$TransCnt)
cat("Updated transition probability matrix:","\n")
print(TrnsPrb)
N.di.1 <- sum(HMMexpct$PostProb[,1]*diff.seq)
N.sa.1 <- sum(HMMexpct$PostProb[,1]*(1-diff.seq))
N.di.2 <- sum(HMMexpct$PostProb[,2]*diff.seq)
N.sa.2 <- sum(HMMexpct$PostProb[,2]*(1-diff.seq))
cat("Updated emission probabilities:","\n")
cat(prb.di.1,prb.di.2,"\n")
prb.di.1 <- N.di.1/(N.di.1+N.sa.1)
prb.di.2 <- N.di.2/(N.di.2+N.sa.2)
EmsPrb <- EmsPrbFct(prb.di.1,prb.di.2)
}
n_subs <- (HMMexpct$TransCnt[1,1] * prb.di.1) + (HMMexpct$TransCnt[1,2] * prb.di.2) +
(HMMexpct$TransCnt[2,1] * prb.di.1) + (HMMexpct$TransCnt[2,2] * prb.di.2)
cat("Number of expected substitutions:", n_subs)
viterbi <- calcViterbi(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq,
DEBUG = F)
decoded_viterbi <- viterbi$backtrack
posterior <- forwardBackward(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq)
viterbi <- calcViterbi(initProb = IntPrb,
transProb = TrnsPrb,
emissionProb = EmsPrb,
obsSeq = obs.seq,
DEBUG = F)
decoded_viterbi <- viterbi$backtrack
posterior <- forwardBackward(InitProb = IntPrb, TransProb = TrnsPrb, EmisProb = EmsPrb, ObsSeq =obs.seq)
decoded_posterior <- max.col(posterior$PostProb)
decoded_posterior
df<-data.frame(observed = integer(), viterbi = integer(), posterior = integer())
for(i in 1:293){
temp <- data.frame( viterbi = decoded_viterbi[i],
observed = diff.seq[i] +1,
posterior = decoded_posterior[i])
df <- rbind(df, temp)
}
df
df<-data.frame(observed = obs.seq, viterbi = decoded_viterbi, posterior = decoded_posterior)
df
df<-data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
df
library(tidyverse)
df$observed
plot <- ggplot(df) +
geom_step(observed)
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
plot <- ggplot(df) +
geom_step(observed)
plot <- ggplot(df) +
geom_step(mapping = aes(observed)))
plot <- ggplot(df) +
geom_step(mapping = aes(observed))
plot
plot <- ggplot(df. aes(y=c(1,2))) +
plot <- ggplot(df, aes(y=c(1,2))) +
geom_step(mapping = aes(observed))
plot
plot <- ggplot(df) +
geom_freqpoly(mapping = aes(observed))
plot
plot <- ggplot(df, aes(x=1:length(df$observed))) +
geom_segment(mapping = aes(observed))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
def
dd
df
plot <- ggplot(df, aes(x)) +
geom_segment()
plot
plot <- ggplot(df, aes(x)) +
geom_line(observed)
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed))
plot
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed)) +
geom_line(aes(y = viterbi, col="red"))
plot
plot
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed)) +
geom_line(aes(y = viterbi, col="red")) +
geom_line(aes(y = posterior, col = "blue"))
plot
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed)) +
geom_line(aes(y = viterbi)) +
geom_line(aes(y = posterior))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed, col="observed")) +
geom_line(aes(y = viterbi, col="viterbi")) +
geom_line(aes(y = posterior, col="posterior"))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
plot <- ggplot(df, aes(x)) +
geom_line(aes(y = observed)) +
geom_line(aes(y = viterbi, col="viterbi")) +
geom_line(aes(y = posterior, col="posterior"))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
plot <- ggplot(df, aes(x)) +
geom_step(direction = "hv") +
geom_line(aes(y = viterbi, col="viterbi")) +
geom_line(aes(y = posterior, col="posterior"))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
plot <- ggplot(df, aes(x)) +
geom_step(aes(y = observed), direction = "hv") +
geom_line(aes(y = viterbi, col="viterbi")) +
geom_line(aes(y = posterior, col="posterior"))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior, x = 1:293)
plot <- ggplot(df, aes(x)) +
geom_step(aes(y = observed), direction = "hv") +
geom_step(aes(y = viterbi, col="viterbi"), direction = "hv") +
geom_step(aes(y = posterior, col="posterior"), direction = "hv")
plot
plot <- ggplot(df, aes(x)) +
geom_point(aes(y = observed)) +
geom_point(aes(y = viterbi))
plot
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
Ln <- length(obs.seq)
par(mfrow=c(3,1))
plot(1:Ln, df$observed,
col="black",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state", ylim = range(0:2))
plot(1:Ln, df$viterbi,
col="blue",type="l",
main="Viterbi sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(0:4))
plot(1:Ln, df$posterior,
col="blue",type="l",
main="Posterior sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(0:4))
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
Ln <- length(obs.seq)
par(mfrow=c(3,1))
plot(1:Ln, df$observed,
col="black",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state", ylim = range(1:2))
plot(1:Ln, df$viterbi,
col="blue",type="l",
main="Viterbi sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
plot(1:Ln, df$posterior,
col="blue",type="l",
main="Posterior sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
Ln <- length(obs.seq)
par(mfrow=c(3,1))
plot(1:Ln, df$observed,
col="black",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state", ylim = range(1:2))
plot(1:Ln, df$viterbi,
col="blue",type="l",
main="Viterbi sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
plot(1:Ln, df$posterior,
col="red",type="l",
main="Posterior sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
diff.seq
obs.seq
df <- data.frame(observed = diff.seq + 1, viterbi = decoded_viterbi, posterior = decoded_posterior)
Ln <- length(obs.seq)
par(mfrow=c(2,1))
# plot(1:Ln, df$observed,
#      col="black",type="l",
#      main="Observed sequence",
#      xlab="sequence index",ylab="Observed state", ylim = range(1:2))
plot(1:Ln, df$viterbi,
col="blue",type="l",
main="Viterbi sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
plot(1:Ln, df$posterior,
col="red",type="l",
main="Posterior sequence",
xlab="sequence index",ylab="Decoded state",ylim = range(1:2))
