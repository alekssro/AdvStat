0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
## Starting values
lambda1Est <- 1 ; lambda2Est <- 3 ; a <- 0.5 ; b <- 0.6
InitTrans <- matrix(c(a, 1-a,
1-b, b),byrow=TRUE,nrow=2)
## Number of iterations
nIter <- 1000  # maximum number of iterations
EMres <- hmmEMpois(InitProb = c(0.5, 0.5), InitTrans = InitTrans,
Lambda = c(lambda1Est, lambda2Est), ObsSeq = ObsSeq)
cat("\ta", " \t\tb", "\t\tLambda1", "\tLambda2", "\n",
EMres$transProb[1,1], EMres$transProb[2,2], EMres$lambda1, EMres$lambda2, sep = '\t')
ViterbiRes <- ViterbiPoisFct(InitProb = c(0.5,0.5), TransProb = EMres$transProb,
Lambda = c(EMres$lambda1, EMres$lambda2), ObsSeq = ObsSeq)
hmmPoisExp <- HMMPoisExpectationsFct(InitProb=c(0.5,0.5), TransProb=EMres$transProb,
Lambda=c(EMres$lambda1, EMres$lambda2),
ObsSeq=ObsSeq)
## Visualize result
Ln <- length(ObsSeq)
par(mfrow=c(3,1))
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(1:Ln,ViterbiRes$BackTrack,
col="red",type="l",
main="Viterbi decoding",
xlab="sequence index",ylab="Decoded state")
plot(1:Ln, hmmPoisExp$PostDecode,
col="darkgreen",type="l",
main="Posterior decoding",
xlab="sequence index",ylab="Observed state")
a <- EMres$transProb[1,1]
b <- EMres$transProb[2,2]
# Emission Probabilities
Emissions_state1 <- dpois(ObsSeq, EMres$lambda1)
Emissions_state2 <- dpois(ObsSeq, EMres$lambda2)
# Likelihood Probabilities in each position
BackProbs <- hmmPoisExp$Lks
Len <- length(ObsSeq)
# Formula in theorem of the PosteriorHMMAnalysis.pdf
p11 <- (BackProbs[2:Len, 1] * a * Emissions_state1[2:Len]) / BackProbs[1:Len-1, 1]
p22 <- (BackProbs[2:Len, 2] * b * Emissions_state2[2:Len]) / BackProbs[1:Len-1, 2]
## Visualize result
Ln <- length(ObsSeq)
par(mfrow=c(3,1))
plot(2:Ln,p11,
col="red",type="l",
main="p11",
xlab="a",ylab="Probabilities")
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(2:Ln,p22,
col="darkgreen",type="l",
main="p22",
xlab="b",ylab="Probabilities")
## Visualize result
Ln <- length(ObsSeq)
par(mfrow=c(3,1))
plot(2:Ln,p11,
col="red",type="l",
main="a_t",
xlab="a",ylab="Probabilities")
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(2:Ln,p22,
col="darkgreen",type="l",
main="p22",
xlab="b",ylab="Probabilities")
## Visualize result
Ln <- length(ObsSeq)
par(mfrow=c(3,1))
plot(2:Ln,p11,
col="red",type="l",
main="a t",
xlab="a",ylab="Probabilities")
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(2:Ln,p22,
col="darkgreen",type="l",
main="p22",
xlab="b",ylab="Probabilities")
## Visualize result
Ln <- length(ObsSeq)
par(mfrow=c(3,1))
plot(2:Ln,p11,
col="red",type="l",
main="a",
xlab="t",ylab="Probabilities")
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(2:Ln,p22,
col="darkgreen",type="l",
main="b",
xlab="t",ylab="Probabilities")
EmisPrb <- matrix(c(dpois(0:7, EMres$lambda1),
dpois(0:7, EMres$lambda2)), nrow = 2, byrow = T)
t <- calcViterbi(initProb = c(0.5, 0.5), transProb = EMres$transProb,
emissionProb = EMres$emisPrb, obsSeq = ObsSeq+1, DEBUG = F)
fbRes <- forwardBackward(InitProb = c(0.5,0.5), TransProb = EMres$transProb,
EmisProb = EMres$emisPrb, ObsSeq = ViterbiRes$BackTrack)
# fbRes$TransCnt / rowSums(fbRes$TransCnt)
# max.col(fbRes$PostProb)
par(mfrow=c(3,1))
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(1:Ln,ViterbiRes$BackTrack,
col="red",type="l",
main="Viterbi decoding",
xlab="sequence index",ylab="Decoded state")
plot(1:Ln, max.col(fbRes$PostProb),
col="darkgreen",type="l",
main="PostProb",
xlab="b",ylab="Probabilities")
max.col(fbRes$PostProb)
PostProb
fbRes$PostProb
EmisPrb <- matrix(c(dpois(0:7, EMres$lambda1),
dpois(0:7, EMres$lambda2)), nrow = 2, byrow = T)
fbRes <- forwardBackward(InitProb = c(0.5,0.5), TransProb = EMres$transProb,
EmisProb = EMres$emisPrb, ObsSeq = ViterbiRes$BackTrack)
# fbRes$TransCnt / rowSums(fbRes$TransCnt)
# max.col(fbRes$PostProb)
par(mfrow=c(3,1))
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(1:Ln,ViterbiRes$BackTrack,
col="red",type="l",
main="Viterbi decoding",
xlab="sequence index",ylab="Decoded state")
plot(1:Ln, fbRes$PostProb[,1],
col="darkgreen",type="l",
main="PostProb",
xlab="b",ylab="Probabilities")
EmisPrb <- matrix(c(dpois(0:7, EMres$lambda1),
dpois(0:7, EMres$lambda2)), nrow = 2, byrow = T)
fbRes <- forwardBackward(InitProb = c(0.5,0.5), TransProb = EMres$transProb,
EmisProb = EMres$emisPrb, ObsSeq = ViterbiRes$BackTrack)
# fbRes$TransCnt / rowSums(fbRes$TransCnt)
# max.col(fbRes$PostProb)
par(mfrow=c(3,1))
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(1:Ln,ViterbiRes$BackTrack,
col="red",type="l",
main="Viterbi decoding",
xlab="sequence index",ylab="Decoded state")
plot(1:Ln, fbRes$PostProb[,1],
col="darkgreen",type="l",
main="PostProb",
xlab="b",ylab="Probabilities")
fbRes
EmisPrb <- matrix(c(dpois(0:7, EMres$lambda1),
dpois(0:7, EMres$lambda2)), nrow = 2, byrow = T)
fbRes <- forwardBackward(InitProb = c(0.5,0.5), TransProb = EMres$transProb,
EmisProb = EMres$emisPrb, ObsSeq = ViterbiRes$BackTrack)
par(mfrow=c(3,1))
plot(1:Ln,ObsSeq,
col="blue",type="l",
main="Observed sequence",
xlab="sequence index",ylab="Observed state")
plot(1:Ln,ViterbiRes$BackTrack,
col="red",type="l",
main="Viterbi decoding",
xlab="sequence index",ylab="Decoded state")
plot(1:Ln, fbRes$PostProb[,1],
col="darkgreen",type="l",
main="PostProb",
xlab="b",ylab="Probabilities")
empDistr <- replicate(1000, expr = {
simHMM <- HMMsimFct(InitProb = c(0.5,0.5), p11 = p11, p22 = p22)
sum(simHMM$HidSeq == 2) / Len
})
hist(empDistr)
mean(empDistr)
library(expm)
numEmpDistr <- replicate(Len, expr = {
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
})
numEmpDistr
transMatInT <- EMres$transProb %^% i
i <- 1
transMatInT <- EMres$transProb %^% i
c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
library(expm)
count <- 0
numEmpDistr <- replicate(1000, expr = {
count = count + 1
transMatInT <- EMres$transProb %^% count
c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
})
numEmpDistr
c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
numEmpDistr
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr)
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach")
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08))
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08), breaks = 100)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08), breaks = 20)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.03, 0.08), breaks = 20)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.02, 0.08), breaks = 20)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 20)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 1000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
empDistr <- replicate(5000, expr = {
simHMM <- HMMsimFct(InitProb = c(0.5,0.5), p11 = p11, p22 = p22)
sum(simHMM$HidSeq == 2) / Len
})
hist(empDistr)
mean(empDistr)
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0.025, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
mean(numEmpDistr)
numEmpDistr
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0.025, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0.025, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
mean(numEmpDistr)
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08), breaks = 50)
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
library(expm)
numEmpDistr <- rep(0, 5000)
for (i in 1:1000) {
transMatInT <- EMres$transProb %^% i
numEmpDistr[i] <- c(0.5, 0.5) %*% transMatInT %*% c(0,1)  # We are interested in state 2
}
viterbiFrac <- sum(ViterbiRes$BackTrack == 2) / Len
posteriorFrac <- sum(hmmPoisExp$PostDecode == 2) / Len
par(mfrow=c(2,1))
hist(empDistr, main = "Simulation approach", xlim = c(0, 0.08))
abline(v=mean(empDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
hist(numEmpDistr, main = "Numerical approach", xlim = c(0, 0.08))
abline(v=mean(numEmpDistr))
abline(v=viterbiFrac,col="red")
abline(v=posteriorFrac,col="blue")
